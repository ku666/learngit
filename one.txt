git init --- 创建一个仓库
git add 文件名称  --- 将文件更新添加
git commit -m "备注" --- 将文件提交，可以提交多个

git status --- 获取本地文件状态
git checkout -- 文件名 --- 在没有git add的情况前 可以回退到本地修改前的文件，从本地仓库恢复到工作区

时光穿梭机
git log --- 获取文件修改的版本时间
git log --pretty=online --- 更好看一些
git reflog --- 获取到已经回退过的版本
git reset --hard 版本号

git reset HEAD 文件名 --- 将暂存区的回退到工作区

删除
del three.txt  --- 删除本地工作区的文件
git checkout -- three.txt --- 还是可以从本地仓库中获取到的

del three.txt
git rm three.txt  --- 删除掉本地仓库的文件，不可以恢复了，已经删除掉了
git commit -m "删除three文件"

工作区 --- 暂存区 --- 本地仓库 --- 远程仓库
新建    --- git add --- git commit --- git pull/git push 


git remote add origin git@github.com:michaelliao/learngit.git ---- 链接上远程仓库
git remote add origin  https://github.com/ku666/learngit
git push -u origin master --- 将本地的推送到远程仓库

我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。

$ git push origin master --- 只要本地作了提交，就可以推送给远程仓库

创建新的分支

git checkout -b dev  ---  创建一个新的dev分支并且把当前的head指针指向了dev,下次使用提交都会提交到dev分支上
git add 
git commit -m 文件名


git checkout master --- 先移动到主分支上  再将主分支和dev分支合并
git merge dev --- 将主分支的指针指到dev上，合并代码，Fast-forward是快速合并

删除分支
git branch -d dev --- 删除分支


To https://github.com/ku666/learngit.git
 ! [rejected]        master -> master (fetch first)
error: failed to push some refs to 'https://github.com/ku666/learngit.git'
hint: Updates were rejected because the remote contains work that you do
hint: not have locally. This is usually caused by another repository pushing
hint: to the same ref. You may want to first integrate the remote changes
hint: (e.g., 'git pull ...') before pushing again.
hint: See the 'Note about fast-forwards' in 'git push --help' for details.
上传远程仓库
git pull origin master
git push origin master

原因： 是再远程仓库修改后要拉取一下


冲突 -- 如何解决冲突
先创建一个新的分支，在分支下提交代码，切换回主分支更改同一个文件同一个地方再提交代码，合并分支代码，会产生冲突问题

git checkout -b dev
git add .
git commit -m ""
git checkout master 
git add 
git commit -m ""

分支管理策略
$ git merge --no-ff -m "merge with no-ff" dev --- 合并分支时，加上--no-ff参数就可以用普通模式合并，合并后的历史有分支，
				             能看出来曾经做过合并，而fast forward合并就看不出来曾经做过合并。

bug分支处理
存在需求更改一半的情况突然生产来bug了 要优先解决bug需求先暂缓，这时需要将需求的代码放到stash工作区暂时存储下，
防止将代码发送到生产环境，需要重新复制一个分支出来,在分支修改后合并到要发生产的分支

git add .  --- 提交下本地代码
git stash  --- 将本地代码放到stash工作区隐匿下
git checkout -b bugIss --- 创建一个新的分支处理问题
git add .  --- 在新的分支下修改完问题进行提交
git commit -m ""
git checkout master --- 切换到最初的本地分支代码
git merge --no-ff -m "合并分支禁用fast forward" buglss  ---- 合并在新的分支处理问题的分支代码
git stash list --- 获取stash内容
git stash pop --- 恢复隐匿的代码，并删除stash中的列表数据
git stash apply --- 恢复隐匿的代码但是并没有删除stash工作区的数据列表
git stash drap --- 删除stash工作区的数据列表

feature新功能做好不要了 要清楚
git branch -d feature --- 执行报错没有合并
		error: The branch 'feature' is not fully merged.
		If you are sure you want to delete it, run 'git branch -D feature'.
git branch -D feature --- 使用大D删除分支，因为小d需要合并代码才可以



